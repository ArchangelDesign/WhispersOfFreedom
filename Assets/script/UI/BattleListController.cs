using System;
using System.Collections;
using System.Collections.Generic;
using System.Threading;
using UnityEngine;
using UnityEngine.UI;

public class BattleListController : MonoBehaviour
{

    const string AUTOGENERATED = "autogenerated";

    public Button buttonPrefab;
    public Text textPrefab;
    public Transform content;
    public GameObject serverEmptyTextMessage;

    private ApiClient apiClient = ApiClient.getInstance();
    private RectTransform rectTransform;
    private int totalBattles = 0;
    private bool playerInMenu = true;

    Thread refreshThread;

    // Start is called before the first frame update
    void Start()
    {
        rectTransform = content.GetComponent<RectTransform>();
        StartCoroutine(RefreshBattleList());
    }

    void HandleParameterizedThreadStart(object obj)
    {
    }


    // Update is called once per frame
    void Update()
    {
        
    }

    IEnumerator RefreshBattleList()
    {
        while (playerInMenu)
        {
            yield return new WaitForSeconds(3);
            if (!apiClient.IsLoggedIn())
                continue;

            Battle[] battles = apiClient.ListBattles();
            totalBattles = 0;

            if (battles == null || battles.Length == 0)
            {
                ClearScrollContent();
                DisplayEmptyServerInfoText(true);
                continue;
            }

            DisplayEmptyServerInfoText(false);
            ClearScrollContent();
            foreach (Battle b in battles)
            {
                AddBattle(b.name, b.clients, b.battleId);
            }
        }
    }

    private void ClearScrollContent()
    {
        int childCount = content.childCount;

        for (int i = 0; i < childCount; i++)
        {
            Transform child = content.GetChild(i);
            if (child.gameObject.tag == AUTOGENERATED)
                Destroy(child.gameObject);
        }
    }

    void DisplayEmptyServerInfoText(bool display)
    {
        serverEmptyTextMessage.SetActive(display);
    }

    void AddBattle(string battleName, int clients, string battleId)
    {

        float joinButtonWidth = 60;
        float margin = 15;
        float contentWidth = rectTransform.rect.width;
        float rowHeight = 35;
        float topPosition = (-rowHeight - margin) * (totalBattles + 1);

        Button joinButton = Instantiate<Button>(buttonPrefab, content);
        joinButton.GetComponentInChildren<Text>().text = "Join";
        joinButton.GetComponent<RectTransform>().sizeDelta = new Vector2(joinButtonWidth, 20);
        joinButton.GetComponent<RectTransform>().pivot = new Vector2(0, 1);
        joinButton.GetComponent<Transform>().localPosition = new Vector2(contentWidth - joinButtonWidth - margin, topPosition);
        joinButton.onClick.AddListener(() => OnJoinBattleClicked(battleId));
        joinButton.gameObject.tag = AUTOGENERATED;

        Text battleNameText = Instantiate(textPrefab, content);
        battleNameText.text = battleName;
        battleNameText.GetComponent<RectTransform>().pivot = new Vector2(0, 1);
        battleNameText.GetComponent<Transform>().localPosition = new Vector2(0 + margin, topPosition);
        battleNameText.gameObject.tag = AUTOGENERATED;

        Text clientsText = Instantiate(textPrefab, content);
        clientsText.text = clients.ToString();
        clientsText.GetComponent<RectTransform>().pivot = new Vector2(0, 1);
        clientsText.GetComponent<RectTransform>().sizeDelta = new Vector2(30, 18);
        clientsText.GetComponent<Transform>().localPosition = new Vector2(contentWidth - 140, topPosition);
        clientsText.gameObject.tag = AUTOGENERATED;

        totalBattles++;
    }

    void OnJoinBattleClicked(string battleId)
    {
        Debug.Log("Joining battle " + battleId);
    }
}
